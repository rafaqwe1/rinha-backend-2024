// Code generated by MockGen. DO NOT EDIT.
// Source: domain/transaction/transaction.go
//
// Generated by this command:
//
//	mockgen -source=domain/transaction/transaction.go -destination=domain/transaction/mock/transaction_mock.go
//

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	reflect "reflect"

	transaction "github.com/rafaqwe1/rinha-backend-2024/domain/transaction"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepositoryInterface is a mock of TransactionRepositoryInterface interface.
type MockTransactionRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryInterfaceMockRecorder
}

// MockTransactionRepositoryInterfaceMockRecorder is the mock recorder for MockTransactionRepositoryInterface.
type MockTransactionRepositoryInterfaceMockRecorder struct {
	mock *MockTransactionRepositoryInterface
}

// NewMockTransactionRepositoryInterface creates a new mock instance.
func NewMockTransactionRepositoryInterface(ctrl *gomock.Controller) *MockTransactionRepositoryInterface {
	mock := &MockTransactionRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepositoryInterface) EXPECT() *MockTransactionRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTransactionRepositoryInterface) Add(entity transaction.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTransactionRepositoryInterfaceMockRecorder) Add(entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTransactionRepositoryInterface)(nil).Add), entity)
}
